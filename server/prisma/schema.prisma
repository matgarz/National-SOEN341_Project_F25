generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model event {
  id             Int              @id @default(autoincrement())
  title          String
  description    String           @db.Text
  date           DateTime
  location       String
  capacity       Int
  ticketType     event_ticketType @default(FREE)
  ticketPrice    Decimal?         @db.Decimal(10, 2)
  category       String?
  imageUrl       String?
  status         event_status     @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizationId Int
  creatorId      Int
  user           user             @relation(fields: [creatorId], references: [id], onDelete: Cascade, map: "Event_creatorId_fkey")
  organization   organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "Event_organizationId_fkey")
  review         review[]
  savedevent     savedevent[]
  ticket         ticket[]

  @@index([category], map: "Event_category_idx")
  @@index([creatorId], map: "Event_creatorId_idx")
  @@index([date], map: "Event_date_idx")
  @@index([organizationId], map: "Event_organizationId_idx")
  @@index([status], map: "Event_status_idx")
}

model organization {
  id           Int      @id @default(autoincrement())
  name         String   @unique(map: "Organization_name_key")
  description  String?  @db.Text
  contactEmail String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  event        event[]
  users        user[]

  @@index([isActive], map: "Organization_isActive_idx")
}

model review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime
  eventId   Int
  userId    Int
  event     event    @relation(fields: [eventId], references: [id], onDelete: Cascade, map: "Review_eventId_fkey")
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Review_userId_fkey")

  @@unique([userId, eventId], map: "Review_userId_eventId_key")
  @@index([eventId], map: "Review_eventId_idx")
  @@index([rating], map: "Review_rating_idx")
}

model savedevent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  eventId   Int
  event     event    @relation(fields: [eventId], references: [id], onDelete: Cascade, map: "SavedEvent_eventId_fkey")
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "SavedEvent_userId_fkey")

  @@unique([userId, eventId], map: "SavedEvent_userId_eventId_key")
  @@index([eventId], map: "SavedEvent_eventId_idx")
  @@index([userId], map: "SavedEvent_userId_idx")
}

model ticket {
  id            Int                  @id @default(autoincrement())
  qrCode        String               @unique(map: "Ticket_qrCode_key")
  claimed       Boolean              @default(true)
  checkedIn     Boolean              @default(false)
  checkedInAt   DateTime?
  paymentStatus ticket_paymentStatus @default(FREE)
  paymentAmount Decimal?             @db.Decimal(10, 2)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime
  eventId       Int
  userId        Int
  event         event                @relation(fields: [eventId], references: [id], onDelete: Cascade, map: "Ticket_eventId_fkey")
  user          user                 @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Ticket_userId_fkey")

  @@unique([userId, eventId], map: "Ticket_userId_eventId_key")
  @@index([eventId, claimed], map: "Ticket_eventId_claimed_idx")
  @@index([qrCode], map: "Ticket_qrCode_idx")
  @@index([userId], map: "Ticket_userId_idx")
}

model user {
  id             Int           @id @default(autoincrement())
  email          String        @unique(map: "User_email_key")
  password       String
  name           String
  studentId      String?       @unique(map: "User_studentId_key")
  role           user_role     @default(STUDENT)
  organizationId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  event          event[]
  review         review[]
  savedevent     savedevent[]
  ticket         ticket[]
  organization   organization? @relation(fields: [organizationId], references: [id])

  @@index([email], map: "User_email_idx")
  @@index([role], map: "User_role_idx")
}

enum ticket_paymentStatus {
  FREE
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum user_role {
  STUDENT
  ORGANIZER
  ADMIN
}

enum event_ticketType {
  FREE
  PAID
}

enum event_status {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}
