//This is where you can update the schema for the database them run the command 'npx prisma migrate dev'
//to update the actual migration.sql
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") //the Database link inside our safe .env file
}

//USER MANAGEMENT (1)

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String // hashed with bcrypt for safety
  name      String
  studentId String?  @unique
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tickets       Ticket[]
  savedEvents   SavedEvent[]
  eventsCreated Event[]      @relation("EventCreator")
  reviews       Review[]

  @@index([email])
  @@index([role])
}

enum Role {
  STUDENT
  ORGANIZER
  ADMIN
}

//ORGANIZATIONS (2)

model Organization {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String?  @db.Text
  contactEmail String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  events Event[]

  @@index([isActive])
}

//EVENTS (3)

model Event {
  id          Int         @id @default(autoincrement())
  title       String
  description String      @db.Text
  date        DateTime
  location    String
  capacity    Int // max tickets
  ticketType  TicketType  @default(FREE)
  ticketPrice Decimal?    @db.Decimal(10, 2)
  category    String? // e.g., "Academic", "Social", "Sports"
  imageUrl    String?
  status      EventStatus @default(APPROVED)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  creatorId Int
  creator   User @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  organizerId Int?
  organizer   Organizer? @relation(fields: [organizerId], references: [id], onDelete: SetNull)

  tickets Ticket[]
  savedBy SavedEvent[]
  reviews Review[]

  @@index([organizationId])
  @@index([creatorId])
  @@index([date])
  @@index([status])
  @@index([category])
  @@index([organizerId])
}

enum TicketType {
  FREE
  PAID
}

enum EventStatus {
  PENDING // awaiting admin approval
  APPROVED // live and visible
  REJECTED // rejected by admin
  CANCELLED // cancelled by organizer
  COMPLETED // event has passed
}

//TICKETS (4)

model Ticket {
  id            Int           @id @default(autoincrement())
  qrCode        String        @unique // unique QR code string
  claimed       Boolean       @default(true)
  checkedIn     Boolean       @default(false)
  checkedInAt   DateTime?
  paymentStatus PaymentStatus @default(FREE)
  paymentAmount Decimal?      @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  eventId Int
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // one ticket per user per event
  @@index([eventId, claimed])
  @@index([userId])
  @@index([qrCode])
}

enum PaymentStatus {
  FREE
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

//CALENDAR (SAVED EVENTS) (5)

model SavedEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Relations
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId Int
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // prevent duplicate saves
  @@index([userId])
  @@index([eventId])
}

//REVIEWS (Additional Feature [possible]) (6)

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int // 1-5 stars
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  eventId Int
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // one review per user per event
  @@index([eventId])
  @@index([rating])
}

//ORGANIZER ENTITY (profile for the even organizer)
model Organizer {
  id          Int       @id @default(autoincrement())
  name        String
  email       String?
  phone       String?
  website     String?
  logoUrl     String?
  department  String?   // optional, e.g., club/department name
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  organizationId Int?          // optional: tie organizer to an Organization
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  events Event[]               // one organizer â†’ many events

  @@index([isActive])
  @@index([organizationId])
}
