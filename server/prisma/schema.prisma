generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id          Int             @id @default(autoincrement())
  title       String
  description String          @db.Text
  date        DateTime
  location    String
  capacity    Int
  ticketType  EventTicketType @default(FREE)
  ticketPrice Decimal?        @db.Decimal(10, 2)
  category    String?
  imageUrl    String?
  status      EventStatus     @default(APPROVED)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "Event_organizationId_fkey")
  organizerId    Int?
  organizer      Organizer?   @relation(fields: [organizerId], references: [id], onDelete: Cascade, map: "Event_organizerId_fkey")

  creatorId Int
  creator   User         @relation(fields: [creatorId], references: [id], onDelete: Cascade, map: "Event_creatorId_fkey")
  reviews   Review[]
  savedBy   SavedEvent[]
  ticket    Ticket[]

  @@index([category], map: "Event_category_idx")
  @@index([creatorId], map: "Event_creatorId_idx")
  @@index([date], map: "Event_date_idx")
  @@index([organizationId], map: "Event_organizationId_idx")
  @@index([status], map: "Event_status_idx")
  @@index([organizerId], map: "Event_organizerId_idx")
}

model Organization {
  id           Int         @id @default(autoincrement())
  name         String      @unique(map: "Organization_name_key")
  description  String?     @db.Text
  contactEmail String?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  event        Event[]
  organizers   Organizer[]

  @@index([isActive], map: "Organization_isActive_idx")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   Int
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, map: "Review_eventId_fkey")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Review_userId_fkey")

  @@unique([userId, eventId], map: "Review_userId_eventId_key")
  @@index([eventId], map: "Review_eventId_idx")
  @@index([rating], map: "Review_rating_idx")
}

model SavedEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, map: "SavedEvent_eventId_fkey")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "SavedEvent_userId_fkey")

  @@unique([userId, eventId], map: "SavedEvent_userId_eventId_key")
  @@index([eventId], map: "SavedEvent_eventId_idx")
  @@index([userId], map: "SavedEvent_userId_idx")
}

model Ticket {
  id            Int           @id @default(autoincrement())
  qrCode        String        @unique(map: "Ticket_qrCode_key")
  claimed       Boolean       @default(true)
  checkedIn     Boolean       @default(false)
  checkedInAt   DateTime?
  paymentStatus PaymentStatus @default(FREE)
  paymentAmount Decimal?      @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  eventId       Int
  userId        Int
  event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade, map: "Ticket_eventId_fkey")
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Ticket_userId_fkey")

  @@unique([userId, eventId], map: "Ticket_userId_eventId_key")
  @@index([eventId, claimed], map: "Ticket_eventId_claimed_idx")
  @@index([qrCode], map: "Ticket_qrCode_idx")
  @@index([userId], map: "Ticket_userId_idx")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique(map: "User_email_key")
  password   String
  name       String
  studentId  String?      @unique(map: "User_studentId_key")
  role       UserRole     @default(STUDENT)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  event      Event[]
  review     Review[]
  savedevent SavedEvent[]
  ticket     Ticket[]

  @@index([email], map: "User_email_idx")
  @@index([role], map: "User_role_idx")
}

//ORGANIZER ENTITY
model Organizer {
  id             Int           @id @default(autoincrement())
  name           String
  email          String?
  phone          String?
  website        String?
  logoUrl        String?
  department     String?
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  // Relations
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  events         Event[]

  @@index([isActive])
  @@index([organizationId])
}

enum PaymentStatus {
  FREE
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum UserRole {
  STUDENT
  ORGANIZER
  ADMIN
}

enum EventTicketType {
  FREE
  PAID
}

enum EventStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}
